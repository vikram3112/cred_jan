{"name": "test_UserLogin_002", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: received Inspector.detached event\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: MicrosoftEdge=120.0.2210.121)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B2110352+58194]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B209ECB2+216530]\n\t(No symbol) [0x00007FF6B1EB9E1B]\n\t(No symbol) [0x00007FF6B1EA4775]\n\t(No symbol) [0x00007FF6B1EA3ED5]\n\t(No symbol) [0x00007FF6B1EA2CA3]\n\t(No symbol) [0x00007FF6B1EA2BF4]\n\t(No symbol) [0x00007FF6B1EA23F1]\n\t(No symbol) [0x00007FF6B1EC617B]\n\t(No symbol) [0x00007FF6B1F48DB5]\n\t(No symbol) [0x00007FF6B1F2BD43]\n\t(No symbol) [0x00007FF6B1EFC162]\n\t(No symbol) [0x00007FF6B1EFB5BD]\n\t(No symbol) [0x00007FF6B1EFC994]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6B22C6CFA+1051354]\n\t(No symbol) [0x00007FF6B1F7F596]\n\tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF6B2016205+34245]\n\tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF6B200E6AD+2669]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6B22C59F3+1046483]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B20A8998+256696]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B20A4124+238148]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B20A4252+238450]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B2098FF1+192785]\n\tBaseThreadInitThunk [0x00007FF881387344+20]\n\tRtlUserThreadStart [0x00007FF8825226B1+33]", "trace": "self = <testCases.test_UserProfile.Test_User_Profile object at 0x000002113AFCC3D0>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"30f5bd2cb0c8b43ad38b5125bd497819\")>\n\n    def test_UserLogin_002(self, setup):\n        self.driver = setup\n        # 1 Browser Open\n        # 2 Go to Url https://automation.credence.in/login\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.ur = UserProfile_Class(self.driver)\n        # 3 Enter email\n        # driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(\"Rohit344@credence.in\")\n>       self.ur.Enter_Email(\"Rohits@credence.in\")\n\ntestCases\\test_UserProfile.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\UserProfilePage.py:19: in Enter_Email\n    self.driver.find_element(*UserProfile_Class.Text_Email_ID).send_keys(email)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002113A211190>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: received Inspector.detached event\\...098FF1+192785]\\\\n\\\\tBaseThreadInitThunk [0x00007FF881387344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8825226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: received Inspector.detached event\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: MicrosoftEdge=120.0.2210.121)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B2110352+58194]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B209ECB2+216530]\nE       \t(No symbol) [0x00007FF6B1EB9E1B]\nE       \t(No symbol) [0x00007FF6B1EA4775]\nE       \t(No symbol) [0x00007FF6B1EA3ED5]\nE       \t(No symbol) [0x00007FF6B1EA2CA3]\nE       \t(No symbol) [0x00007FF6B1EA2BF4]\nE       \t(No symbol) [0x00007FF6B1EA23F1]\nE       \t(No symbol) [0x00007FF6B1EC617B]\nE       \t(No symbol) [0x00007FF6B1F48DB5]\nE       \t(No symbol) [0x00007FF6B1F2BD43]\nE       \t(No symbol) [0x00007FF6B1EFC162]\nE       \t(No symbol) [0x00007FF6B1EFB5BD]\nE       \t(No symbol) [0x00007FF6B1EFC994]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6B22C6CFA+1051354]\nE       \t(No symbol) [0x00007FF6B1F7F596]\nE       \tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF6B2016205+34245]\nE       \tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF6B200E6AD+2669]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6B22C59F3+1046483]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B20A8998+256696]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B20A4124+238148]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B20A4252+238450]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B2098FF1+192785]\nE       \tBaseThreadInitThunk [0x00007FF881387344+20]\nE       \tRtlUserThreadStart [0x00007FF8825226B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "stdout", "source": "5b8e17d7-9bd0-4dd1-975a-e464515d7d2f-attachment.txt", "type": "text/plain"}], "start": 1704637697017, "stop": 1704637704679, "uuid": "900f6888-5f32-451c-a665-7edbe40d64a7", "historyId": "f9656eb1ecd5e234b06968e36c9922ba", "testCaseId": "f9656eb1ecd5e234b06968e36c9922ba", "fullName": "testCases.test_UserProfile.Test_User_Profile#test_UserLogin_002", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_UserProfile"}, {"name": "subSuite", "value": "Test_User_Profile"}, {"name": "host", "value": "Tushar-Pc"}, {"name": "thread", "value": "15648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_UserProfile"}]}